// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: setting.sql

package db

import (
	"context"
	"database/sql"
)

const countSettings = `-- name: CountSettings :one
SELECT count(*) FROM settings
`

func (q *Queries) CountSettings(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countSettings)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSetting = `-- name: CreateSetting :execresult
INSERT INTO settings (
  user_id,
  theme,
  currency
) VALUES (
  ?, ?, ?
)
`

type CreateSettingParams struct {
	UserID   int32          `json:"user_id"`
	Theme    sql.NullString `json:"theme"`
	Currency sql.NullString `json:"currency"`
}

func (q *Queries) CreateSetting(ctx context.Context, arg CreateSettingParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createSetting, arg.UserID, arg.Theme, arg.Currency)
}

const deleteSetting = `-- name: DeleteSetting :exec
DELETE FROM settings
WHERE id = ?
`

func (q *Queries) DeleteSetting(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteSetting, id)
	return err
}

const getSetting = `-- name: GetSetting :one
SELECT id, user_id, theme, currency, created_at, updated_at FROM settings
WHERE id = ?
`

func (q *Queries) GetSetting(ctx context.Context, id int32) (Setting, error) {
	row := q.db.QueryRowContext(ctx, getSetting, id)
	var i Setting
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Theme,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listSettings = `-- name: ListSettings :many
SELECT id, user_id, theme, currency, created_at, updated_at FROM settings
ORDER BY id
LIMIT ?
OFFSET ?
`

type ListSettingsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSettings(ctx context.Context, arg ListSettingsParams) ([]Setting, error) {
	rows, err := q.db.QueryContext(ctx, listSettings, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Setting{}
	for rows.Next() {
		var i Setting
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Theme,
			&i.Currency,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSetting = `-- name: UpdateSetting :exec
UPDATE settings 
SET
  user_id = ?,
  theme = ?,
  currency = ?
WHERE id = ?
`

type UpdateSettingParams struct {
	UserID   int32          `json:"user_id"`
	Theme    sql.NullString `json:"theme"`
	Currency sql.NullString `json:"currency"`
	ID       int32          `json:"id"`
}

func (q *Queries) UpdateSetting(ctx context.Context, arg UpdateSettingParams) error {
	_, err := q.db.ExecContext(ctx, updateSetting,
		arg.UserID,
		arg.Theme,
		arg.Currency,
		arg.ID,
	)
	return err
}
