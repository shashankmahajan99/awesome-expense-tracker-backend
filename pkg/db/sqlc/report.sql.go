// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: report.sql

package db

import (
	"context"
	"database/sql"
)

const countreports = `-- name: Countreports :one
SELECT count(*) FROM reports
`

func (q *Queries) Countreports(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countreports)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createReport = `-- name: CreateReport :execresult
INSERT INTO reports (
  user_id,
  title
) VALUES (
  ?, ?
)
`

type CreateReportParams struct {
	UserID int32  `json:"user_id"`
	Title  string `json:"title"`
}

func (q *Queries) CreateReport(ctx context.Context, arg CreateReportParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createReport, arg.UserID, arg.Title)
}

const deleteReport = `-- name: DeleteReport :exec
DELETE FROM reports
WHERE id = ?
`

func (q *Queries) DeleteReport(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteReport, id)
	return err
}

const getReport = `-- name: GetReport :one
SELECT id, user_id, title, created_at, updated_at FROM reports
WHERE id = ?
`

func (q *Queries) GetReport(ctx context.Context, id int32) (Report, error) {
	row := q.db.QueryRowContext(ctx, getReport, id)
	var i Report
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listreports = `-- name: Listreports :many
SELECT id, user_id, title, created_at, updated_at FROM reports
ORDER BY id
LIMIT ?
OFFSET ?
`

type ListreportsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) Listreports(ctx context.Context, arg ListreportsParams) ([]Report, error) {
	rows, err := q.db.QueryContext(ctx, listreports, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Report{}
	for rows.Next() {
		var i Report
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReport = `-- name: UpdateReport :exec
UPDATE reports
SET
  user_id = ?,
  title = ?
WHERE id = ?
`

type UpdateReportParams struct {
	UserID int32  `json:"user_id"`
	Title  string `json:"title"`
	ID     int32  `json:"id"`
}

func (q *Queries) UpdateReport(ctx context.Context, arg UpdateReportParams) error {
	_, err := q.db.ExecContext(ctx, updateReport, arg.UserID, arg.Title, arg.ID)
	return err
}
