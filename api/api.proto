syntax = "proto3";

package apidefinitions;

import "messages.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

option go_package = "./api;AwesomeExpenseTrackerApi";

// Health Check API
service HealthCheck {
  rpc Healthy(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get: "/healthy"
    };
  }
}

// User Authentication API
service UserAuthentication {
  rpc LoginUserAPI(LoginUserRequest) returns (OAuth2Token) {
    option (google.api.http) = {
      post: "/user/login"
      body: "*"
    };
  }
  rpc RegisterUserAPI(RegisterUserRequest) returns (OAuth2Token) {
    option (google.api.http) = {
      post: "/user/register"
      body: "*"
    };
  }
  rpc DeleteUserAPI(DeleteUserRequest) returns (DeleteUserResponse) {
    option (google.api.http) = {
      delete: "/v1/user/delete/{username}"
    };
  }
  rpc UpdateUserAPI(UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      put: "/v1/user/update"
      body: "*"
    };
  }
  rpc AuthenticateWithGoogleCallback(AuthenticateWithGoogleCallbackRequest)
      returns (OAuth2Token) {
    option (google.api.http) = {
      get: "/auth/google/callback"
    };
  }
}

// Expense Management API
service ExpenseManagement {
  rpc CreateExpenseAPI(CreateExpenseRequest) returns (CreateExpenseResponse) {
    option (google.api.http) = {
      post: "/v1/expense"
      body: "*"
    };
  }
  rpc UpdateExpenseAPI(UpdateExpenseRequest) returns (UpdateExpenseResponse) {
    option (google.api.http) = {
      put: "/v1/expense/{id}"
      body: "*"
    };
  }
  rpc DeleteExpenseAPI(DeleteExpenseRequest) returns (DeleteExpenseResponse) {
    option (google.api.http) = {
      delete: "/v1/expense/{id}"
    };
  }
  rpc ListExpensesAPI(ListExpensesRequest) returns (ListExpensesResponse) {
    option (google.api.http) = {
      get: "/v1/expense"
    };
  }
  rpc GetExpenseAPI(GetExpenseRequest) returns (GetExpenseResponse) {
    option (google.api.http) = {
      get: "/v1/expense/{id}"
    };
  }
}

// Reports API
service Reports {
  rpc GenerateReportAPI(GenerateReportRequest)
      returns (GenerateReportResponse) {
    option (google.api.http) = {
      post: "/reports"
      body: "*"
    };
  }
}

// User Profile API
service UserProfile {
  rpc GetUserProfileAPI(GetUserProfileRequest)
      returns (GetUserProfileResponse) {
    option (google.api.http) = {
      post: "/v1/profile/get"
      body: "*"
    };
  }
  rpc UpdateUserProfileAPI(UpdateUserProfileRequest)
      returns (UpdateUserProfileResponse) {
    option (google.api.http) = {
      put: "/v1/profile/update"
      body: "*"
    };
  }
  rpc CreateUserProfileAPI(CreateUserProfileRequest)
      returns (CreateUserProfileResponse) {
    option (google.api.http) = {
      post: "/v1/profile/create"
      body: "*"
    };
  }
}

// Settings API
service Settings {
  rpc GetSettingsAPI(GetSettingsRequest) returns (GetSettingsResponse) {
    option (google.api.http) = {
      get: "/settings"
    };
  }
  rpc UpdateSettingsAPI(UpdateSettingsRequest)
      returns (UpdateSettingsResponse) {
    option (google.api.http) = {
      put: "/settings"
      body: "*"
    };
  }
}
