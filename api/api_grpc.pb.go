// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package AwesomeExpenseTrackerApi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HealthCheckClient is the client API for HealthCheck service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthCheckClient interface {
	Healthy(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type healthCheckClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthCheckClient(cc grpc.ClientConnInterface) HealthCheckClient {
	return &healthCheckClient{cc}
}

func (c *healthCheckClient) Healthy(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/apidefinitions.HealthCheck/Healthy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthCheckServer is the server API for HealthCheck service.
// All implementations must embed UnimplementedHealthCheckServer
// for forward compatibility
type HealthCheckServer interface {
	Healthy(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedHealthCheckServer()
}

// UnimplementedHealthCheckServer must be embedded to have forward compatible implementations.
type UnimplementedHealthCheckServer struct {
}

func (UnimplementedHealthCheckServer) Healthy(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthy not implemented")
}
func (UnimplementedHealthCheckServer) mustEmbedUnimplementedHealthCheckServer() {}

// UnsafeHealthCheckServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthCheckServer will
// result in compilation errors.
type UnsafeHealthCheckServer interface {
	mustEmbedUnimplementedHealthCheckServer()
}

func RegisterHealthCheckServer(s grpc.ServiceRegistrar, srv HealthCheckServer) {
	s.RegisterService(&HealthCheck_ServiceDesc, srv)
}

func _HealthCheck_Healthy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthCheckServer).Healthy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidefinitions.HealthCheck/Healthy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthCheckServer).Healthy(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// HealthCheck_ServiceDesc is the grpc.ServiceDesc for HealthCheck service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthCheck_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apidefinitions.HealthCheck",
	HandlerType: (*HealthCheckServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Healthy",
			Handler:    _HealthCheck_Healthy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// UserAuthenticationClient is the client API for UserAuthentication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserAuthenticationClient interface {
	LoginUserAPI(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*OAuth2Token, error)
	RegisterUserAPI(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*OAuth2Token, error)
	DeleteUserAPI(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	UpdateUserAPI(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	AuthenticateWithGoogleCallback(ctx context.Context, in *AuthenticateWithGoogleCallbackRequest, opts ...grpc.CallOption) (*OAuth2Token, error)
}

type userAuthenticationClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAuthenticationClient(cc grpc.ClientConnInterface) UserAuthenticationClient {
	return &userAuthenticationClient{cc}
}

func (c *userAuthenticationClient) LoginUserAPI(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*OAuth2Token, error) {
	out := new(OAuth2Token)
	err := c.cc.Invoke(ctx, "/apidefinitions.UserAuthentication/LoginUserAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthenticationClient) RegisterUserAPI(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*OAuth2Token, error) {
	out := new(OAuth2Token)
	err := c.cc.Invoke(ctx, "/apidefinitions.UserAuthentication/RegisterUserAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthenticationClient) DeleteUserAPI(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, "/apidefinitions.UserAuthentication/DeleteUserAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthenticationClient) UpdateUserAPI(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, "/apidefinitions.UserAuthentication/UpdateUserAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthenticationClient) AuthenticateWithGoogleCallback(ctx context.Context, in *AuthenticateWithGoogleCallbackRequest, opts ...grpc.CallOption) (*OAuth2Token, error) {
	out := new(OAuth2Token)
	err := c.cc.Invoke(ctx, "/apidefinitions.UserAuthentication/AuthenticateWithGoogleCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAuthenticationServer is the server API for UserAuthentication service.
// All implementations must embed UnimplementedUserAuthenticationServer
// for forward compatibility
type UserAuthenticationServer interface {
	LoginUserAPI(context.Context, *LoginUserRequest) (*OAuth2Token, error)
	RegisterUserAPI(context.Context, *RegisterUserRequest) (*OAuth2Token, error)
	DeleteUserAPI(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	UpdateUserAPI(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	AuthenticateWithGoogleCallback(context.Context, *AuthenticateWithGoogleCallbackRequest) (*OAuth2Token, error)
	mustEmbedUnimplementedUserAuthenticationServer()
}

// UnimplementedUserAuthenticationServer must be embedded to have forward compatible implementations.
type UnimplementedUserAuthenticationServer struct {
}

func (UnimplementedUserAuthenticationServer) LoginUserAPI(context.Context, *LoginUserRequest) (*OAuth2Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUserAPI not implemented")
}
func (UnimplementedUserAuthenticationServer) RegisterUserAPI(context.Context, *RegisterUserRequest) (*OAuth2Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUserAPI not implemented")
}
func (UnimplementedUserAuthenticationServer) DeleteUserAPI(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserAPI not implemented")
}
func (UnimplementedUserAuthenticationServer) UpdateUserAPI(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAPI not implemented")
}
func (UnimplementedUserAuthenticationServer) AuthenticateWithGoogleCallback(context.Context, *AuthenticateWithGoogleCallbackRequest) (*OAuth2Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateWithGoogleCallback not implemented")
}
func (UnimplementedUserAuthenticationServer) mustEmbedUnimplementedUserAuthenticationServer() {}

// UnsafeUserAuthenticationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAuthenticationServer will
// result in compilation errors.
type UnsafeUserAuthenticationServer interface {
	mustEmbedUnimplementedUserAuthenticationServer()
}

func RegisterUserAuthenticationServer(s grpc.ServiceRegistrar, srv UserAuthenticationServer) {
	s.RegisterService(&UserAuthentication_ServiceDesc, srv)
}

func _UserAuthentication_LoginUserAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthenticationServer).LoginUserAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidefinitions.UserAuthentication/LoginUserAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthenticationServer).LoginUserAPI(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuthentication_RegisterUserAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthenticationServer).RegisterUserAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidefinitions.UserAuthentication/RegisterUserAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthenticationServer).RegisterUserAPI(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuthentication_DeleteUserAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthenticationServer).DeleteUserAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidefinitions.UserAuthentication/DeleteUserAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthenticationServer).DeleteUserAPI(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuthentication_UpdateUserAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthenticationServer).UpdateUserAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidefinitions.UserAuthentication/UpdateUserAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthenticationServer).UpdateUserAPI(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuthentication_AuthenticateWithGoogleCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateWithGoogleCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthenticationServer).AuthenticateWithGoogleCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidefinitions.UserAuthentication/AuthenticateWithGoogleCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthenticationServer).AuthenticateWithGoogleCallback(ctx, req.(*AuthenticateWithGoogleCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserAuthentication_ServiceDesc is the grpc.ServiceDesc for UserAuthentication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAuthentication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apidefinitions.UserAuthentication",
	HandlerType: (*UserAuthenticationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginUserAPI",
			Handler:    _UserAuthentication_LoginUserAPI_Handler,
		},
		{
			MethodName: "RegisterUserAPI",
			Handler:    _UserAuthentication_RegisterUserAPI_Handler,
		},
		{
			MethodName: "DeleteUserAPI",
			Handler:    _UserAuthentication_DeleteUserAPI_Handler,
		},
		{
			MethodName: "UpdateUserAPI",
			Handler:    _UserAuthentication_UpdateUserAPI_Handler,
		},
		{
			MethodName: "AuthenticateWithGoogleCallback",
			Handler:    _UserAuthentication_AuthenticateWithGoogleCallback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// ExpenseManagementClient is the client API for ExpenseManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExpenseManagementClient interface {
	CreateExpenseAPI(ctx context.Context, in *CreateExpenseRequest, opts ...grpc.CallOption) (*CreateExpenseResponse, error)
	UpdateExpenseAPI(ctx context.Context, in *UpdateExpenseRequest, opts ...grpc.CallOption) (*UpdateExpenseResponse, error)
	DeleteExpenseAPI(ctx context.Context, in *DeleteExpenseRequest, opts ...grpc.CallOption) (*DeleteExpenseResponse, error)
	ListExpensesAPI(ctx context.Context, in *ListExpensesRequest, opts ...grpc.CallOption) (*ListExpensesResponse, error)
	GetExpenseAPI(ctx context.Context, in *GetExpenseRequest, opts ...grpc.CallOption) (*GetExpenseResponse, error)
}

type expenseManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewExpenseManagementClient(cc grpc.ClientConnInterface) ExpenseManagementClient {
	return &expenseManagementClient{cc}
}

func (c *expenseManagementClient) CreateExpenseAPI(ctx context.Context, in *CreateExpenseRequest, opts ...grpc.CallOption) (*CreateExpenseResponse, error) {
	out := new(CreateExpenseResponse)
	err := c.cc.Invoke(ctx, "/apidefinitions.ExpenseManagement/CreateExpenseAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expenseManagementClient) UpdateExpenseAPI(ctx context.Context, in *UpdateExpenseRequest, opts ...grpc.CallOption) (*UpdateExpenseResponse, error) {
	out := new(UpdateExpenseResponse)
	err := c.cc.Invoke(ctx, "/apidefinitions.ExpenseManagement/UpdateExpenseAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expenseManagementClient) DeleteExpenseAPI(ctx context.Context, in *DeleteExpenseRequest, opts ...grpc.CallOption) (*DeleteExpenseResponse, error) {
	out := new(DeleteExpenseResponse)
	err := c.cc.Invoke(ctx, "/apidefinitions.ExpenseManagement/DeleteExpenseAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expenseManagementClient) ListExpensesAPI(ctx context.Context, in *ListExpensesRequest, opts ...grpc.CallOption) (*ListExpensesResponse, error) {
	out := new(ListExpensesResponse)
	err := c.cc.Invoke(ctx, "/apidefinitions.ExpenseManagement/ListExpensesAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expenseManagementClient) GetExpenseAPI(ctx context.Context, in *GetExpenseRequest, opts ...grpc.CallOption) (*GetExpenseResponse, error) {
	out := new(GetExpenseResponse)
	err := c.cc.Invoke(ctx, "/apidefinitions.ExpenseManagement/GetExpenseAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExpenseManagementServer is the server API for ExpenseManagement service.
// All implementations must embed UnimplementedExpenseManagementServer
// for forward compatibility
type ExpenseManagementServer interface {
	CreateExpenseAPI(context.Context, *CreateExpenseRequest) (*CreateExpenseResponse, error)
	UpdateExpenseAPI(context.Context, *UpdateExpenseRequest) (*UpdateExpenseResponse, error)
	DeleteExpenseAPI(context.Context, *DeleteExpenseRequest) (*DeleteExpenseResponse, error)
	ListExpensesAPI(context.Context, *ListExpensesRequest) (*ListExpensesResponse, error)
	GetExpenseAPI(context.Context, *GetExpenseRequest) (*GetExpenseResponse, error)
	mustEmbedUnimplementedExpenseManagementServer()
}

// UnimplementedExpenseManagementServer must be embedded to have forward compatible implementations.
type UnimplementedExpenseManagementServer struct {
}

func (UnimplementedExpenseManagementServer) CreateExpenseAPI(context.Context, *CreateExpenseRequest) (*CreateExpenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExpenseAPI not implemented")
}
func (UnimplementedExpenseManagementServer) UpdateExpenseAPI(context.Context, *UpdateExpenseRequest) (*UpdateExpenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExpenseAPI not implemented")
}
func (UnimplementedExpenseManagementServer) DeleteExpenseAPI(context.Context, *DeleteExpenseRequest) (*DeleteExpenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExpenseAPI not implemented")
}
func (UnimplementedExpenseManagementServer) ListExpensesAPI(context.Context, *ListExpensesRequest) (*ListExpensesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExpensesAPI not implemented")
}
func (UnimplementedExpenseManagementServer) GetExpenseAPI(context.Context, *GetExpenseRequest) (*GetExpenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExpenseAPI not implemented")
}
func (UnimplementedExpenseManagementServer) mustEmbedUnimplementedExpenseManagementServer() {}

// UnsafeExpenseManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExpenseManagementServer will
// result in compilation errors.
type UnsafeExpenseManagementServer interface {
	mustEmbedUnimplementedExpenseManagementServer()
}

func RegisterExpenseManagementServer(s grpc.ServiceRegistrar, srv ExpenseManagementServer) {
	s.RegisterService(&ExpenseManagement_ServiceDesc, srv)
}

func _ExpenseManagement_CreateExpenseAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExpenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseManagementServer).CreateExpenseAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidefinitions.ExpenseManagement/CreateExpenseAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseManagementServer).CreateExpenseAPI(ctx, req.(*CreateExpenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpenseManagement_UpdateExpenseAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExpenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseManagementServer).UpdateExpenseAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidefinitions.ExpenseManagement/UpdateExpenseAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseManagementServer).UpdateExpenseAPI(ctx, req.(*UpdateExpenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpenseManagement_DeleteExpenseAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExpenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseManagementServer).DeleteExpenseAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidefinitions.ExpenseManagement/DeleteExpenseAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseManagementServer).DeleteExpenseAPI(ctx, req.(*DeleteExpenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpenseManagement_ListExpensesAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExpensesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseManagementServer).ListExpensesAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidefinitions.ExpenseManagement/ListExpensesAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseManagementServer).ListExpensesAPI(ctx, req.(*ListExpensesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpenseManagement_GetExpenseAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExpenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseManagementServer).GetExpenseAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidefinitions.ExpenseManagement/GetExpenseAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseManagementServer).GetExpenseAPI(ctx, req.(*GetExpenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExpenseManagement_ServiceDesc is the grpc.ServiceDesc for ExpenseManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExpenseManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apidefinitions.ExpenseManagement",
	HandlerType: (*ExpenseManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateExpenseAPI",
			Handler:    _ExpenseManagement_CreateExpenseAPI_Handler,
		},
		{
			MethodName: "UpdateExpenseAPI",
			Handler:    _ExpenseManagement_UpdateExpenseAPI_Handler,
		},
		{
			MethodName: "DeleteExpenseAPI",
			Handler:    _ExpenseManagement_DeleteExpenseAPI_Handler,
		},
		{
			MethodName: "ListExpensesAPI",
			Handler:    _ExpenseManagement_ListExpensesAPI_Handler,
		},
		{
			MethodName: "GetExpenseAPI",
			Handler:    _ExpenseManagement_GetExpenseAPI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// ReportsClient is the client API for Reports service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReportsClient interface {
	GenerateReportAPI(ctx context.Context, in *GenerateReportRequest, opts ...grpc.CallOption) (*GenerateReportResponse, error)
}

type reportsClient struct {
	cc grpc.ClientConnInterface
}

func NewReportsClient(cc grpc.ClientConnInterface) ReportsClient {
	return &reportsClient{cc}
}

func (c *reportsClient) GenerateReportAPI(ctx context.Context, in *GenerateReportRequest, opts ...grpc.CallOption) (*GenerateReportResponse, error) {
	out := new(GenerateReportResponse)
	err := c.cc.Invoke(ctx, "/apidefinitions.Reports/GenerateReportAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportsServer is the server API for Reports service.
// All implementations must embed UnimplementedReportsServer
// for forward compatibility
type ReportsServer interface {
	GenerateReportAPI(context.Context, *GenerateReportRequest) (*GenerateReportResponse, error)
	mustEmbedUnimplementedReportsServer()
}

// UnimplementedReportsServer must be embedded to have forward compatible implementations.
type UnimplementedReportsServer struct {
}

func (UnimplementedReportsServer) GenerateReportAPI(context.Context, *GenerateReportRequest) (*GenerateReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateReportAPI not implemented")
}
func (UnimplementedReportsServer) mustEmbedUnimplementedReportsServer() {}

// UnsafeReportsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReportsServer will
// result in compilation errors.
type UnsafeReportsServer interface {
	mustEmbedUnimplementedReportsServer()
}

func RegisterReportsServer(s grpc.ServiceRegistrar, srv ReportsServer) {
	s.RegisterService(&Reports_ServiceDesc, srv)
}

func _Reports_GenerateReportAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportsServer).GenerateReportAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidefinitions.Reports/GenerateReportAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportsServer).GenerateReportAPI(ctx, req.(*GenerateReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Reports_ServiceDesc is the grpc.ServiceDesc for Reports service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Reports_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apidefinitions.Reports",
	HandlerType: (*ReportsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateReportAPI",
			Handler:    _Reports_GenerateReportAPI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// UserProfileClient is the client API for UserProfile service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserProfileClient interface {
	GetUserProfileAPI(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error)
	UpdateUserProfileAPI(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error)
	CreateUserProfileAPI(ctx context.Context, in *CreateUserProfileRequest, opts ...grpc.CallOption) (*CreateUserProfileResponse, error)
}

type userProfileClient struct {
	cc grpc.ClientConnInterface
}

func NewUserProfileClient(cc grpc.ClientConnInterface) UserProfileClient {
	return &userProfileClient{cc}
}

func (c *userProfileClient) GetUserProfileAPI(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error) {
	out := new(GetUserProfileResponse)
	err := c.cc.Invoke(ctx, "/apidefinitions.UserProfile/GetUserProfileAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProfileClient) UpdateUserProfileAPI(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error) {
	out := new(UpdateUserProfileResponse)
	err := c.cc.Invoke(ctx, "/apidefinitions.UserProfile/UpdateUserProfileAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProfileClient) CreateUserProfileAPI(ctx context.Context, in *CreateUserProfileRequest, opts ...grpc.CallOption) (*CreateUserProfileResponse, error) {
	out := new(CreateUserProfileResponse)
	err := c.cc.Invoke(ctx, "/apidefinitions.UserProfile/CreateUserProfileAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserProfileServer is the server API for UserProfile service.
// All implementations must embed UnimplementedUserProfileServer
// for forward compatibility
type UserProfileServer interface {
	GetUserProfileAPI(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error)
	UpdateUserProfileAPI(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error)
	CreateUserProfileAPI(context.Context, *CreateUserProfileRequest) (*CreateUserProfileResponse, error)
	mustEmbedUnimplementedUserProfileServer()
}

// UnimplementedUserProfileServer must be embedded to have forward compatible implementations.
type UnimplementedUserProfileServer struct {
}

func (UnimplementedUserProfileServer) GetUserProfileAPI(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfileAPI not implemented")
}
func (UnimplementedUserProfileServer) UpdateUserProfileAPI(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfileAPI not implemented")
}
func (UnimplementedUserProfileServer) CreateUserProfileAPI(context.Context, *CreateUserProfileRequest) (*CreateUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserProfileAPI not implemented")
}
func (UnimplementedUserProfileServer) mustEmbedUnimplementedUserProfileServer() {}

// UnsafeUserProfileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserProfileServer will
// result in compilation errors.
type UnsafeUserProfileServer interface {
	mustEmbedUnimplementedUserProfileServer()
}

func RegisterUserProfileServer(s grpc.ServiceRegistrar, srv UserProfileServer) {
	s.RegisterService(&UserProfile_ServiceDesc, srv)
}

func _UserProfile_GetUserProfileAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfileServer).GetUserProfileAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidefinitions.UserProfile/GetUserProfileAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfileServer).GetUserProfileAPI(ctx, req.(*GetUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProfile_UpdateUserProfileAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfileServer).UpdateUserProfileAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidefinitions.UserProfile/UpdateUserProfileAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfileServer).UpdateUserProfileAPI(ctx, req.(*UpdateUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProfile_CreateUserProfileAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfileServer).CreateUserProfileAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidefinitions.UserProfile/CreateUserProfileAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfileServer).CreateUserProfileAPI(ctx, req.(*CreateUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserProfile_ServiceDesc is the grpc.ServiceDesc for UserProfile service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserProfile_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apidefinitions.UserProfile",
	HandlerType: (*UserProfileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserProfileAPI",
			Handler:    _UserProfile_GetUserProfileAPI_Handler,
		},
		{
			MethodName: "UpdateUserProfileAPI",
			Handler:    _UserProfile_UpdateUserProfileAPI_Handler,
		},
		{
			MethodName: "CreateUserProfileAPI",
			Handler:    _UserProfile_CreateUserProfileAPI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// SettingsClient is the client API for Settings service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SettingsClient interface {
	GetSettingsAPI(ctx context.Context, in *GetSettingsRequest, opts ...grpc.CallOption) (*GetSettingsResponse, error)
	UpdateSettingsAPI(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*UpdateSettingsResponse, error)
}

type settingsClient struct {
	cc grpc.ClientConnInterface
}

func NewSettingsClient(cc grpc.ClientConnInterface) SettingsClient {
	return &settingsClient{cc}
}

func (c *settingsClient) GetSettingsAPI(ctx context.Context, in *GetSettingsRequest, opts ...grpc.CallOption) (*GetSettingsResponse, error) {
	out := new(GetSettingsResponse)
	err := c.cc.Invoke(ctx, "/apidefinitions.Settings/GetSettingsAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) UpdateSettingsAPI(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*UpdateSettingsResponse, error) {
	out := new(UpdateSettingsResponse)
	err := c.cc.Invoke(ctx, "/apidefinitions.Settings/UpdateSettingsAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SettingsServer is the server API for Settings service.
// All implementations must embed UnimplementedSettingsServer
// for forward compatibility
type SettingsServer interface {
	GetSettingsAPI(context.Context, *GetSettingsRequest) (*GetSettingsResponse, error)
	UpdateSettingsAPI(context.Context, *UpdateSettingsRequest) (*UpdateSettingsResponse, error)
	mustEmbedUnimplementedSettingsServer()
}

// UnimplementedSettingsServer must be embedded to have forward compatible implementations.
type UnimplementedSettingsServer struct {
}

func (UnimplementedSettingsServer) GetSettingsAPI(context.Context, *GetSettingsRequest) (*GetSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettingsAPI not implemented")
}
func (UnimplementedSettingsServer) UpdateSettingsAPI(context.Context, *UpdateSettingsRequest) (*UpdateSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSettingsAPI not implemented")
}
func (UnimplementedSettingsServer) mustEmbedUnimplementedSettingsServer() {}

// UnsafeSettingsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SettingsServer will
// result in compilation errors.
type UnsafeSettingsServer interface {
	mustEmbedUnimplementedSettingsServer()
}

func RegisterSettingsServer(s grpc.ServiceRegistrar, srv SettingsServer) {
	s.RegisterService(&Settings_ServiceDesc, srv)
}

func _Settings_GetSettingsAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).GetSettingsAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidefinitions.Settings/GetSettingsAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).GetSettingsAPI(ctx, req.(*GetSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_UpdateSettingsAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).UpdateSettingsAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apidefinitions.Settings/UpdateSettingsAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).UpdateSettingsAPI(ctx, req.(*UpdateSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Settings_ServiceDesc is the grpc.ServiceDesc for Settings service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Settings_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apidefinitions.Settings",
	HandlerType: (*SettingsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSettingsAPI",
			Handler:    _Settings_GetSettingsAPI_Handler,
		},
		{
			MethodName: "UpdateSettingsAPI",
			Handler:    _Settings_UpdateSettingsAPI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
